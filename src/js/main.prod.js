(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

window.addEventListener('load', function () {
  var preloaderCol = document.querySelectorAll('.preloader__col');
  var preloadList = document.querySelector('.preloader__list');
  var arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
  var arrCount = void 0;
  preloadList.style.display = 'none';

  var interval = setInterval(function () {
    arrCount = Math.floor(Math.random() * arr.length);
    if (arrCount % 2 === 0) {
      preloaderCol[arr[arrCount]].style.transform = 'translateX(100%)';
    } else {
      preloaderCol[arr[arrCount]].style.transform = 'translateX(-100%)';
    }
    arr.splice(arrCount, 1);
    if (arr.length === 0) {
      clearInterval(interval);
    }
  }, 150);
});

function UseTabs() {
  var _this = this;

  this.tabs = document.querySelectorAll('.tabs__item');
  this.tabsList = document.querySelector('.tabs__list');
  // this.blocks = document.querySelectorAll('.blocks');
  this.blocksWrap = document.querySelector('.blocks-wrap');
  this.tabsLine = document.querySelector('.tabs__line');

  this._moveLine = function (index) {
    var countLine = 0;
    if (document.documentElement.clientWidth > 768) {
      _this.tabsLine.style.width = '5px';
      _this.tabsLine.style.left = '0';
      for (var j = 0; j < index; j++) {
        countLine += _this.tabs[j].getBoundingClientRect().height;
      }
      _this.tabsLine.style.top = countLine + 'px';
      _this.tabsLine.style.height = _this.tabs[index].getBoundingClientRect().height + 'px';
    } else {
      _this.tabsLine.style.height = '5px';
      _this.tabsLine.style.top = 'auto';
      for (var _j = 0; _j < index; _j++) {
        countLine += _this.tabs[_j].getBoundingClientRect().width;
      }
      _this.tabsLine.style.left = countLine + 'px';
      _this.tabsLine.style.width = _this.tabs[index].getBoundingClientRect().width + 'px';
    }
  };

  this._events = function () {
    _this.tabsList.addEventListener('click', function (e) {
      _this._reset();
      for (var i = 0; i < _this.tabs.length; i++) {
        if (e.target === _this.tabs[i]) {
          _this.blocksWrap.style.transform = 'translateX(' + i * -100 + '%)';
          _this.tabs[i].classList.add('tabs__item--active');
          _this._moveLine(i);
        }
      }
    });

    window.addEventListener('resize', function () {
      for (var i = 0; i < _this.tabs.length; i++) {
        if (_this.tabs[i].classList.contains('tabs__item--active')) {
          _this._moveLine(i);
        }
      }
    });
  };

  this._reset = function () {
    for (var i = 0; i < _this.tabs.length; i++) {
      if (_this.tabs[i].classList.contains('tabs__item--active')) {
        _this.tabs[i].classList.remove('tabs__item--active');
      }
    }
  };

  this._init = function () {
    _this._events();
    _this._moveLine(0);
  };

  this._init();
}

var useTabs = new UseTabs();

function SliderWorks() {
  var _this2 = this;

  this.worksList = document.querySelector('.works__list');
  this.worksItem = document.querySelectorAll('.works__item');
  this.btnLeft = document.querySelector('.works__btn--left');
  this.btnRight = document.querySelector('.works__btn--right');
  this.count = 0;
  this.blockCount = document.querySelector('.works__count');

  this._events = function () {
    _this2.btnRight.addEventListener('click', function (e) {
      if (_this2.count < _this2.worksItem.length - 1) {
        _this2.count++;
        _this2.worksList.style.transform = 'translateX(' + _this2.count * -100 + '%)';
        _this2._count();
      }
    });
    _this2.btnLeft.addEventListener('click', function (e) {
      if (_this2.count > 0) {
        _this2.count--;
        _this2.worksList.style.transform = 'translateX(' + _this2.count * -100 + '%)';
        _this2._count();
      }
    });
  };

  this._count = function () {
    _this2.blockCount.innerHTML = _this2.count + 1 + ' | ' + _this2.worksItem.length;
  };

  this._init = function () {
    _this2._events();
    _this2._count();
  };

  this._init();
}

var sliderWorks = new SliderWorks();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
