(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function UseTabs() {
  var _this = this;

  this.tabs = document.querySelectorAll('.tabs__item');
  this.tabsList = document.querySelector('.tabs__list');
  // this.blocks = document.querySelectorAll('.blocks');
  this.blocksWrap = document.querySelector('.blocks-wrap');

  this._events = function () {
    _this.tabsList.addEventListener('click', function (e) {
      _this._reset();
      for (var i = 0; i < _this.tabs.length; i++) {
        if (e.target === _this.tabs[i]) {
          _this.blocksWrap.style.transform = 'translateX(' + i * -100 + '%)';
          _this.tabs[i].classList.add('tabs__item--active');
        }
      }
    });
  };

  this._reset = function () {
    for (var i = 0; i < _this.tabs.length; i++) {
      if (_this.tabs[i].classList.contains('tabs__item--active')) {
        _this.tabs[i].classList.remove('tabs__item--active');
      }
    }
  };

  this._init = function () {
    _this._events();
  };

  this._init();
}

var useTabs = new UseTabs();

function SliderWorks() {
  var _this2 = this;

  this.worksList = document.querySelector('.works__list');
  this.worksItem = document.querySelectorAll('.works__item');
  this.btnLeft = document.querySelector('.works__btn--left');
  this.btnRight = document.querySelector('.works__btn--right');
  this.count = 0;
  this.blockCount = document.querySelector('.works__count');

  this._events = function () {
    _this2.btnRight.addEventListener('click', function (e) {
      if (_this2.count < _this2.worksItem.length - 1) {
        _this2.count++;
        _this2.worksList.style.transform = 'translateX(' + _this2.count * -100 + '%)';
        _this2._count();
      }
    });
    _this2.btnLeft.addEventListener('click', function (e) {
      if (_this2.count > 0) {
        _this2.count--;
        _this2.worksList.style.transform = 'translateX(' + _this2.count * -100 + '%)';
        _this2._count();
      }
    });
  };

  this._count = function () {
    _this2.blockCount.innerHTML = _this2.count + 1 + ' | ' + _this2.worksItem.length;
  };

  this._init = function () {
    _this2._events();
    _this2._count();
  };

  this._init();
}

var sliderWorks = new SliderWorks();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfNWJhNmVkMDAuanMiXSwibmFtZXMiOlsiVXNlVGFicyIsInRhYnMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YWJzTGlzdCIsInF1ZXJ5U2VsZWN0b3IiLCJibG9ja3NXcmFwIiwiX2V2ZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJfcmVzZXQiLCJpIiwibGVuZ3RoIiwiZSIsInRhcmdldCIsInN0eWxlIiwidHJhbnNmb3JtIiwiY2xhc3NMaXN0IiwiYWRkIiwiY29udGFpbnMiLCJyZW1vdmUiLCJfaW5pdCIsInVzZVRhYnMiLCJTbGlkZXJXb3JrcyIsIndvcmtzTGlzdCIsIndvcmtzSXRlbSIsImJ0bkxlZnQiLCJidG5SaWdodCIsImNvdW50IiwiYmxvY2tDb3VudCIsIl9jb3VudCIsImlubmVySFRNTCIsInNsaWRlcldvcmtzIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLE9BQVQsR0FBbUI7QUFBQTs7QUFDakIsT0FBS0MsSUFBTCxHQUFZQyxTQUFTQyxnQkFBVCxDQUEwQixhQUExQixDQUFaO0FBQ0EsT0FBS0MsUUFBTCxHQUFnQkYsU0FBU0csYUFBVCxDQUF1QixhQUF2QixDQUFoQjtBQUNBO0FBQ0EsT0FBS0MsVUFBTCxHQUFrQkosU0FBU0csYUFBVCxDQUF1QixjQUF2QixDQUFsQjs7QUFFQSxPQUFLRSxPQUFMLEdBQWUsWUFBTTtBQUNuQixVQUFLSCxRQUFMLENBQWNJLGdCQUFkLENBQStCLE9BQS9CLEVBQXdDLGFBQUs7QUFDM0MsWUFBS0MsTUFBTDtBQUNBLFdBQUksSUFBSUMsSUFBSSxDQUFaLEVBQWVBLElBQUksTUFBS1QsSUFBTCxDQUFVVSxNQUE3QixFQUFxQ0QsR0FBckMsRUFBMEM7QUFDeEMsWUFBR0UsRUFBRUMsTUFBRixLQUFhLE1BQUtaLElBQUwsQ0FBVVMsQ0FBVixDQUFoQixFQUE4QjtBQUM1QixnQkFBS0osVUFBTCxDQUFnQlEsS0FBaEIsQ0FBc0JDLFNBQXRCLG1CQUFnREwsSUFBSSxDQUFDLEdBQXJEO0FBQ0EsZ0JBQUtULElBQUwsQ0FBVVMsQ0FBVixFQUFhTSxTQUFiLENBQXVCQyxHQUF2QixDQUEyQixvQkFBM0I7QUFDRDtBQUNGO0FBQ0YsS0FSRDtBQVNELEdBVkQ7O0FBWUEsT0FBS1IsTUFBTCxHQUFjLFlBQU07QUFDbEIsU0FBSSxJQUFJQyxJQUFJLENBQVosRUFBZUEsSUFBSSxNQUFLVCxJQUFMLENBQVVVLE1BQTdCLEVBQXFDRCxHQUFyQyxFQUEwQztBQUN4QyxVQUFHLE1BQUtULElBQUwsQ0FBVVMsQ0FBVixFQUFhTSxTQUFiLENBQXVCRSxRQUF2QixDQUFnQyxvQkFBaEMsQ0FBSCxFQUEwRDtBQUN4RCxjQUFLakIsSUFBTCxDQUFVUyxDQUFWLEVBQWFNLFNBQWIsQ0FBdUJHLE1BQXZCLENBQThCLG9CQUE5QjtBQUNEO0FBQ0Y7QUFDRixHQU5EOztBQVFBLE9BQUtDLEtBQUwsR0FBYSxZQUFNO0FBQ2pCLFVBQUtiLE9BQUw7QUFDRCxHQUZEOztBQUlBLE9BQUthLEtBQUw7QUFDRDs7QUFFRCxJQUFJQyxVQUFVLElBQUlyQixPQUFKLEVBQWQ7O0FBRUEsU0FBU3NCLFdBQVQsR0FBdUI7QUFBQTs7QUFDckIsT0FBS0MsU0FBTCxHQUFpQnJCLFNBQVNHLGFBQVQsQ0FBdUIsY0FBdkIsQ0FBakI7QUFDQSxPQUFLbUIsU0FBTCxHQUFpQnRCLFNBQVNDLGdCQUFULENBQTBCLGNBQTFCLENBQWpCO0FBQ0EsT0FBS3NCLE9BQUwsR0FBZXZCLFNBQVNHLGFBQVQsQ0FBdUIsbUJBQXZCLENBQWY7QUFDQSxPQUFLcUIsUUFBTCxHQUFnQnhCLFNBQVNHLGFBQVQsQ0FBdUIsb0JBQXZCLENBQWhCO0FBQ0EsT0FBS3NCLEtBQUwsR0FBYSxDQUFiO0FBQ0EsT0FBS0MsVUFBTCxHQUFrQjFCLFNBQVNHLGFBQVQsQ0FBdUIsZUFBdkIsQ0FBbEI7O0FBRUEsT0FBS0UsT0FBTCxHQUFlLFlBQU07QUFDbkIsV0FBS21CLFFBQUwsQ0FBY2xCLGdCQUFkLENBQStCLE9BQS9CLEVBQXdDLGFBQUs7QUFDM0MsVUFBRyxPQUFLbUIsS0FBTCxHQUFhLE9BQUtILFNBQUwsQ0FBZWIsTUFBZixHQUF3QixDQUF4QyxFQUEyQztBQUN6QyxlQUFLZ0IsS0FBTDtBQUNBLGVBQUtKLFNBQUwsQ0FBZVQsS0FBZixDQUFxQkMsU0FBckIsbUJBQStDLE9BQUtZLEtBQUwsR0FBYSxDQUFDLEdBQTdEO0FBQ0EsZUFBS0UsTUFBTDtBQUNEO0FBQ0YsS0FORDtBQU9BLFdBQUtKLE9BQUwsQ0FBYWpCLGdCQUFiLENBQThCLE9BQTlCLEVBQXVDLGFBQUs7QUFDMUMsVUFBRyxPQUFLbUIsS0FBTCxHQUFhLENBQWhCLEVBQW1CO0FBQ2pCLGVBQUtBLEtBQUw7QUFDQSxlQUFLSixTQUFMLENBQWVULEtBQWYsQ0FBcUJDLFNBQXJCLG1CQUErQyxPQUFLWSxLQUFMLEdBQWEsQ0FBQyxHQUE3RDtBQUNBLGVBQUtFLE1BQUw7QUFDRDtBQUNGLEtBTkQ7QUFPRCxHQWZEOztBQWlCQSxPQUFLQSxNQUFMLEdBQWMsWUFBTTtBQUNsQixXQUFLRCxVQUFMLENBQWdCRSxTQUFoQixHQUErQixPQUFLSCxLQUFMLEdBQWEsQ0FBNUMsV0FBbUQsT0FBS0gsU0FBTCxDQUFlYixNQUFsRTtBQUNELEdBRkQ7O0FBSUEsT0FBS1MsS0FBTCxHQUFhLFlBQU07QUFDakIsV0FBS2IsT0FBTDtBQUNBLFdBQUtzQixNQUFMO0FBQ0QsR0FIRDs7QUFLQSxPQUFLVCxLQUFMO0FBQ0Q7O0FBRUQsSUFBSVcsY0FBYyxJQUFJVCxXQUFKLEVBQWxCIiwiZmlsZSI6ImZha2VfNWJhNmVkMDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBVc2VUYWJzKCkge1xuICB0aGlzLnRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFic19faXRlbScpO1xuICB0aGlzLnRhYnNMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhYnNfX2xpc3QnKTtcbiAgLy8gdGhpcy5ibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYmxvY2tzJyk7XG4gIHRoaXMuYmxvY2tzV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ibG9ja3Mtd3JhcCcpO1xuXG4gIHRoaXMuX2V2ZW50cyA9ICgpID0+IHtcbiAgICB0aGlzLnRhYnNMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICB0aGlzLl9yZXNldCgpO1xuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMudGFicy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZihlLnRhcmdldCA9PT0gdGhpcy50YWJzW2ldKSB7XG4gICAgICAgICAgdGhpcy5ibG9ja3NXcmFwLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7aSAqIC0xMDB9JSlgO1xuICAgICAgICAgIHRoaXMudGFic1tpXS5jbGFzc0xpc3QuYWRkKCd0YWJzX19pdGVtLS1hY3RpdmUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0aGlzLl9yZXNldCA9ICgpID0+IHtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy50YWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZih0aGlzLnRhYnNbaV0uY2xhc3NMaXN0LmNvbnRhaW5zKCd0YWJzX19pdGVtLS1hY3RpdmUnKSkge1xuICAgICAgICB0aGlzLnRhYnNbaV0uY2xhc3NMaXN0LnJlbW92ZSgndGFic19faXRlbS0tYWN0aXZlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5faW5pdCA9ICgpID0+IHtcbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIHRoaXMuX2luaXQoKTtcbn1cblxubGV0IHVzZVRhYnMgPSBuZXcgVXNlVGFicygpO1xuXG5mdW5jdGlvbiBTbGlkZXJXb3JrcygpIHtcbiAgdGhpcy53b3Jrc0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud29ya3NfX2xpc3QnKTtcbiAgdGhpcy53b3Jrc0l0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcud29ya3NfX2l0ZW0nKTtcbiAgdGhpcy5idG5MZWZ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndvcmtzX19idG4tLWxlZnQnKTtcbiAgdGhpcy5idG5SaWdodCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53b3Jrc19fYnRuLS1yaWdodCcpO1xuICB0aGlzLmNvdW50ID0gMDtcbiAgdGhpcy5ibG9ja0NvdW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndvcmtzX19jb3VudCcpO1xuXG4gIHRoaXMuX2V2ZW50cyA9ICgpID0+IHtcbiAgICB0aGlzLmJ0blJpZ2h0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICBpZih0aGlzLmNvdW50IDwgdGhpcy53b3Jrc0l0ZW0ubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLmNvdW50Kys7XG4gICAgICAgIHRoaXMud29ya3NMaXN0LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7dGhpcy5jb3VudCAqIC0xMDB9JSlgO1xuICAgICAgICB0aGlzLl9jb3VudCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuYnRuTGVmdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgaWYodGhpcy5jb3VudCA+IDApIHtcbiAgICAgICAgdGhpcy5jb3VudC0tO1xuICAgICAgICB0aGlzLndvcmtzTGlzdC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RoaXMuY291bnQgKiAtMTAwfSUpYDtcbiAgICAgICAgdGhpcy5fY291bnQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuX2NvdW50ID0gKCkgPT4ge1xuICAgIHRoaXMuYmxvY2tDb3VudC5pbm5lckhUTUwgPSBgJHt0aGlzLmNvdW50ICsgMX0gfCAke3RoaXMud29ya3NJdGVtLmxlbmd0aH1gO1xuICB9XG5cbiAgdGhpcy5faW5pdCA9ICgpID0+IHtcbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB0aGlzLl9jb3VudCgpO1xuICB9XG5cbiAgdGhpcy5faW5pdCgpO1xufVxuXG5sZXQgc2xpZGVyV29ya3MgPSBuZXcgU2xpZGVyV29ya3MoKTtcbiJdfQ==
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
